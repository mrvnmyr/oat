name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      # parameters
      do_release:
        description: 'Set to true to trigger release'
        required: false
        default: 'false'
        type: boolean

# cancel previous unfinished/running jobs in each separate branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.4"

      - name: Build for all platforms
        run: go run ./build_tool/main.go --debug

      - name: Upload binaries
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          path: ./bin/
          retention-days: 1 # Artifact will be deleted after 1 day

  release:
    if: github.event_name == 'workflow_dispatch' && inputs.do_release == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./bin/
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R ./bin/

      - name: Generate release tag
        id: tag
        run: echo "tag=v$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          for file in ./bin/*; do
            echo "Uploading $file..."
            gh release upload "${{ steps.tag.outputs.tag }}" "$file" --clobber
          done
